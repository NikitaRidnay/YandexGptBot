import telebot
import time
from yandex_cloud_ml_sdk import YCloudML


TELEGRAM_TOKEN = ""
YANDEX_FOLDER_ID = ""
YANDEX_AUTH_TOKEN = ""

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def ask_yagpt(question, temperature=0.5):
    try:
        sdk = YCloudML(
            folder_id=YANDEX_FOLDER_ID,
            auth=YANDEX_AUTH_TOKEN,
        )


        model = sdk.models.completions("yandexgpt")
        model = model.configure(temperature=temperature)


        result = model.run(question)

        if not result.alternatives:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"

        return result.alternatives[0].text

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}")
        return "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"




@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YandexGPT.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    )
    bot.reply_to(message, welcome_text)


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç\n"
        "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /ask —Å –≤–æ–ø—Ä–æ—Å–æ–º\n"
        "3. –ü—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ —á–µ—Ä–Ω–∞—è –¥—ã—Ä–∞?\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç YandexGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 0.5 (–±–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)"
    )
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['ask'])
def handle_ask_command(message):

    question = message.text[len('/ask '):].strip()

    if not question:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ –°–æ–ª–Ω—Ü–µ?")
        return

    processing_msg = bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    start_time = time.time()

    response = ask_yagpt(question)


    processing_time = time.time() - start_time

    bot.edit_message_text(
        chat_id=processing_msg.chat.id,
        message_id=processing_msg.message_id,
        text=f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n\nüí° –û—Ç–≤–µ—Ç: {response}\n\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥"
    )


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text.startswith('/'):
        return

    processing_msg = bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    start_time = time.time()
    response = ask_yagpt(message.text)
    processing_time = time.time() - start_time
    bot.edit_message_text(
        chat_id=processing_msg.chat.id,
        message_id=processing_msg.message_id,
        text=f"üí° –û—Ç–≤–µ—Ç: {response}\n\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥"
    )


if __name__ == '__main__':
    bot.polling(none_stop=True)
